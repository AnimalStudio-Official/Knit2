"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[30],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>m});var a=r(67294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function l(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?l(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):l(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},l=Object.keys(e);for(a=0;a<l.length;a++)r=l[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)r=l[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var s=a.createContext({}),c=function(e){var t=a.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},p=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,l=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=c(r),m=n,y=u["".concat(s,".").concat(m)]||u[m]||d[m]||l;return r?a.createElement(y,o(o({ref:t},p),{},{components:r})):a.createElement(y,o({ref:t},p))}));function m(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var l=r.length,o=new Array(l);o[0]=u;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:n,o[1]=i;for(var c=2;c<l;c++)o[c]=r[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,r)}u.displayName="MDXCreateElement"},84381:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>d,frontMatter:()=>l,metadata:()=>i,toc:()=>c});var a=r(87462),n=(r(67294),r(3905));const l={sidebar_position:7},o="Examples",i={unversionedId:"examples",id:"examples",title:"Examples",description:"Start All Services",source:"@site/docs/examples.md",sourceDirName:".",slug:"/examples",permalink:"/Crystal/docs/examples",draft:!1,editUrl:"https://github.com/AnimalStudio-Official/Crystal/edit/master/docs/examples.md",tags:[],version:"current",sidebarPosition:7,frontMatter:{sidebar_position:7},sidebar:"defaultSidebar",previous:{title:"Execution Model",permalink:"/Crystal/docs/executionmodel"},next:{title:"Middleware",permalink:"/Crystal/docs/middleware"}},s={},c=[{value:"Start All Services",id:"start-all-services",level:2},{value:"Expose a Collection of Modules",id:"expose-a-collection-of-modules",level:2}],p={toc:c};function d(e){let{components:t,...r}=e;return(0,n.kt)("wrapper",(0,a.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"examples"},"Examples"),(0,n.kt)("h2",{id:"start-all-services"},"Start All Services"),(0,n.kt)("p",null,"A useful pattern is to keep all service modules within a folder. The script that starts Knit can then require all of these at once. Let's say we have a directory structure like such:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Server",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"CrystalRuntime ","[Script]"),(0,n.kt)("li",{parentName:"ul"},"Services ","[Folder]",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"MyService ","[Module]"),(0,n.kt)("li",{parentName:"ul"},"AnotherService ","[Module]"),(0,n.kt)("li",{parentName:"ul"},"HelloService ","[Module]")))))),(0,n.kt)("p",null,"We can write our CrystalRuntime script as such:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-lua"},'local Crystal = require(game:GetService("ReplicatedStorage").Packages.Crystal)\n\n-- Load all services:\nfor _,v in ipairs(script.Parent.Services:GetDescendants()) do\n    if (v:IsA("ModuleScript")) then\n        require(v)\n    end\nend\n\nCrystal.Start():catch(warn)\n')),(0,n.kt)("p",null,"Alternatively, we can use ",(0,n.kt)("inlineCode",{parentName:"p"},"Crystal.AddServices")," or ",(0,n.kt)("inlineCode",{parentName:"p"},"Crystal.AddServicesDeep")," to load all of the services without writing a loop. It scans and loads all ModuleScripts found and passes them to ",(0,n.kt)("inlineCode",{parentName:"p"},"Crystal.CreateService"),":"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-lua"},"local Crystal = require(game:GetService(\"ReplicatedStorage\").Packages.Crystal)\n\n-- Load all services within 'Services':\nCrystal.AddServices(script.Parent.Services)\n\n-- Load all services (the Deep version scans all descendants of the passed instance):\nCrystal.AddServicesDeep(script.Parent.OtherServices)\n\nCrystal.Start():catch(warn)\n")),(0,n.kt)("admonition",{type:"tip"},(0,n.kt)("p",{parentName:"admonition"},"This same design practice can also be done on the client with controllers. Either loop through and collect controllers or use the ",(0,n.kt)("inlineCode",{parentName:"p"},"Crystal.AddControllers")," or ",(0,n.kt)("inlineCode",{parentName:"p"},"Crystal.AddControllersDeep")," function.")),(0,n.kt)("hr",null),(0,n.kt)("h2",{id:"expose-a-collection-of-modules"},"Expose a Collection of Modules"),(0,n.kt)("p",null,"Like ",(0,n.kt)("inlineCode",{parentName:"p"},"Crystal.Util"),", we can expose a collection of modules to our codebase. This is very simple. All we need to do is add ",(0,n.kt)("inlineCode",{parentName:"p"},"Crystal.WHATEVER")," and point it to a folder of ModuleScripts."),(0,n.kt)("p",null,"For instance, if we had a folder of modules at ",(0,n.kt)("inlineCode",{parentName:"p"},"ReplicatedStorage.MyModules"),", we can expose this within our main runtime script:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-lua"},'local Crystal = require(game:GetService("ReplicatedStorage").Packages.Crystal)\n\n-- Expose our MyModules folder:\nCrystal.MyModules = game:GetService("ReplicatedStorage").MyModules\n\n-- Load services/controllers\n\nCrystal.Start()\n')),(0,n.kt)("p",null,"We can then use these modules elsewhere. For instance:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-lua"},"local SomeModule = require(Crystal.MyModules.SomeModule)\n")))}d.isMDXComponent=!0}}]);