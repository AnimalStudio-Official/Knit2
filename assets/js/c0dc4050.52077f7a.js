"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[201],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>y});var r=n(67294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,l=function(e,t){if(null==e)return{};var n,r,l={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var o=r.createContext({}),c=function(e){var t=r.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(o.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,l=e.mdxType,a=e.originalType,o=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=c(n),y=l,m=d["".concat(o,".").concat(y)]||d[y]||u[y]||a;return n?r.createElement(m,s(s({ref:t},p),{},{components:n})):r.createElement(m,s({ref:t},p))}));function y(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var a=n.length,s=new Array(a);s[0]=d;var i={};for(var o in t)hasOwnProperty.call(t,o)&&(i[o]=t[o]);i.originalType=e,i.mdxType="string"==typeof e?e:l,s[1]=i;for(var c=2;c<a;c++)s[c]=n[c];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},47790:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>s,default:()=>u,frontMatter:()=>a,metadata:()=>i,toc:()=>c});var r=n(87462),l=(n(67294),n(3905));const a={sidebar_position:9},s="VS Code Snippets",i={unversionedId:"vscodesnippets",id:"vscodesnippets",title:"VS Code Snippets",description:"Being able to quickly create services, controllers, or other Crystal-related items is very useful when using Crystal as a framework. To keep Crystal lightweight, there are no required extensions or plugins. Instead, below are some VS Code snippets that can be used to speed up development.",source:"@site/docs/vscodesnippets.md",sourceDirName:".",slug:"/vscodesnippets",permalink:"/Crystal/docs/vscodesnippets",draft:!1,editUrl:"https://github.com/AnimalStudio-Official/Crystal/edit/master/docs/vscodesnippets.md",tags:[],version:"current",sidebarPosition:9,frontMatter:{sidebar_position:9},sidebar:"defaultSidebar",previous:{title:"Middleware",permalink:"/Crystal/docs/middleware"}},o={},c=[{value:"Using Snippets",id:"using-snippets",level:2},{value:"Crystal Snippets",id:"crystal-snippets",level:2},{value:"Crystal",id:"crystal",level:3},{value:"Service",id:"service",level:3},{value:"Crystal Service",id:"crystal-service",level:3},{value:"Crystal Controller",id:"crystal-controller",level:3},{value:"Crystal Require",id:"crystal-require",level:3},{value:"Lua Class",id:"lua-class",level:3},{value:"All",id:"all",level:3}],p={toc:c};function u(e){let{components:t,...a}=e;return(0,l.kt)("wrapper",(0,r.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"vs-code-snippets"},"VS Code Snippets"),(0,l.kt)("p",null,"Being able to quickly create services, controllers, or other Crystal-related items is very useful when using Crystal as a framework. To keep Crystal lightweight, there are no required extensions or plugins. Instead, below are some VS Code snippets that can be used to speed up development."),(0,l.kt)("p",null,(0,l.kt)("img",{alt:"Snippets",src:n(59810).Z,width:"800",height:"450"})),(0,l.kt)("h2",{id:"using-snippets"},"Using Snippets"),(0,l.kt)("p",null,"Snippets are a Visual Studio Code feature. Check out the ",(0,l.kt)("a",{parentName:"p",href:"https://code.visualstudio.com/docs/editor/userdefinedsnippets"},"Snippets documentation")," for more info. Adding Snippets for Lua is very easy."),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"Within Visual Studio, navigate from the toolbar: ",(0,l.kt)("inlineCode",{parentName:"li"},"File -> Preferences -> User Snippets")),(0,l.kt)("li",{parentName:"ol"},"Type in and select ",(0,l.kt)("inlineCode",{parentName:"li"},"lua.json")),(0,l.kt)("li",{parentName:"ol"},"Within the ",(0,l.kt)("inlineCode",{parentName:"li"},"{}")," braces, include any or all of the snippets below"),(0,l.kt)("li",{parentName:"ol"},"Save the file"),(0,l.kt)("li",{parentName:"ol"},'Within your actual source files, start typing a prefix (e.g. "Crystal") and select the autocompleted snippet to paste it in'),(0,l.kt)("li",{parentName:"ol"},"Depending on the snippet, parts of the pasted code will be selected and can be typed over (e.g. setting the name of a service)")),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"crystal-snippets"},"Crystal Snippets"),(0,l.kt)("p",null,"Below are useful VS Code snippets for Crystal. The snippets assume that the Crystal module has been placed within ReplicatedStorage."),(0,l.kt)("h3",{id:"crystal"},"Crystal"),(0,l.kt)("p",null,"Include a ",(0,l.kt)("inlineCode",{parentName:"p"},"require")," statement for Crystal."),(0,l.kt)("details",{class:"note"},(0,l.kt)("summary",null,"Snippet"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'"Crystal": {\n    "prefix": ["Crystal"],\n    "body": ["local Crystal = require(ReplicatedStorage.Packages.Crystal)"],\n    "description": "Require the Crystal module"\n}\n'))),(0,l.kt)("details",{class:"success"},(0,l.kt)("summary",null,"Code Result"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-lua"},"local Crystal = require(ReplicatedStorage.Packages.Crystal)\n"))),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"service"},"Service"),(0,l.kt)("p",null,"Reference a Roblox service."),(0,l.kt)("details",{class:"note"},(0,l.kt)("summary",null,"Snippet"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'"Service": {\n    "prefix": ["service"],\n    "body": ["local ${0:Name}Service = game:GetService(\\"${0:Name}Service\\")"],\n    "description": "Roblox Service"\n}\n'))),(0,l.kt)("details",{class:"success"},(0,l.kt)("summary",null,"Code Result"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-lua"},'local HttpService = game:GetService("HttpService")\n'))),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"crystal-service"},"Crystal Service"),(0,l.kt)("p",null,"Reference Crystal, create a service, and return the service."),(0,l.kt)("details",{class:"note"},(0,l.kt)("summary",null,"Snippet"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'"Crystal Service": {\n    "prefix": ["Crystalservice"],\n    "body": [\n        "local Crystal = require(ReplicatedStorage.Packages.Crystal)",\n        "",\n        "local ${0:$TM_FILENAME_BASE} = Crystal.CreateService {",\n        "\\tName = \\"${0:$TM_FILENAME_BASE}\\",",\n        "\\tClient = {},",\n        "}",\n        "",\n        "",\n        "function ${0:$TM_FILENAME_BASE}:CrystalStart()",\n        "\\t",\n        "end",\n        "",\n        "",\n        "function ${0:$TM_FILENAME_BASE}:CrystalInit()",\n        "\\t",\n        "end",\n        "",\n        "",\n        "return ${0:$TM_FILENAME_BASE}",\n        ""\n    ],\n    "description": "Crystal Service template"\n}\n'))),(0,l.kt)("details",{class:"success"},(0,l.kt)("summary",null,"Code Result"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-lua"},'local Crystal = require(ReplicatedStorage.Packages.Crystal)\n\nlocal MyService = Crystal.CreateService {\n    Name = "MyService",\n    Client = {},\n}\n\nfunction MyService:CrystalStart()\nend\n\nfunction MyService:CrystalInit()\nend\n\nreturn MyService\n'))),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"crystal-controller"},"Crystal Controller"),(0,l.kt)("p",null,"Reference Crystal, create a controller, and return the controller."),(0,l.kt)("details",{class:"note"},(0,l.kt)("summary",null,"Snippet"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'"Crystal Controller": {\n    "prefix": ["Crystalcontroller"],\n    "body": [\n        "local Crystal = require(ReplicatedStorage.Packages.Crystal)",\n        "",\n        "local ${0:$TM_FILENAME_BASE} = Crystal.CreateController { Name = \\"${0:$TM_FILENAME_BASE}\\" }",\n        "",\n        "",\n        "function ${0:$TM_FILENAME_BASE}:CrystalStart()",\n        "\\t",\n        "end",\n        "",\n        "",\n        "function ${0:$TM_FILENAME_BASE}:CrystalInit()",\n        "\\t",\n        "end",\n        "",\n        "",\n        "return ${0:$TM_FILENAME_BASE}",\n        ""\n    ],\n    "description": "Crystal Controller template"\n}\n'))),(0,l.kt)("details",{class:"success"},(0,l.kt)("summary",null,"Code Result"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-lua"},'local Crystal = require(ReplicatedStorage.Packages.Crystal)\n\nlocal MyController = Crystal.CreateController {\n    Name = "MyController",\n}\n\nfunction MyController:CrystalStart()\nend\n\nfunction MyController:CrystalInit()\nend\n\nreturn MyController\n'))),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"crystal-require"},"Crystal Require"),(0,l.kt)("p",null,"Require a module within Crystal."),(0,l.kt)("details",{class:"note"},(0,l.kt)("summary",null,"Snippet"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'"Crystal Require": {\n    "prefix": ["Crystalrequire"],\n    "body": ["local ${1:Name} = require(Crystal.${2:Util}.${1:Name})"],\n    "description": "Crystal Require template"\n}\n'))),(0,l.kt)("details",{class:"success"},(0,l.kt)("summary",null,"Code Result"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-lua"},"local Signal = require(Crystal.Util.Signal)\n"))),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"lua-class"},"Lua Class"),(0,l.kt)("p",null,"A standard Lua class."),(0,l.kt)("details",{class:"note"},(0,l.kt)("summary",null,"Snippet"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'"Class": {\n    "prefix": ["class"],\n    "body": [\n        "local ${0:$TM_FILENAME_BASE} = {}",\n        "${0:$TM_FILENAME_BASE}.__index = ${0:$TM_FILENAME_BASE}",\n        "",\n        "",\n        "function ${0:$TM_FILENAME_BASE}.new()",\n        "\\tlocal self = setmetatable({}, ${0:$TM_FILENAME_BASE})",\n        "\\treturn self",\n        "end",\n        "",\n        "",\n        "function ${0:$TM_FILENAME_BASE}:Destroy()",\n        "\\t",\n        "end",\n        "",\n        "",\n        "return ${0:$TM_FILENAME_BASE}",\n        ""\n    ],\n    "description": "Lua Class"\n}\n'))),(0,l.kt)("details",{class:"success"},(0,l.kt)("summary",null,"Code Result"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-lua"},"local MyClass = {}\nMyClass.__index = MyClass\n\nfunction MyClass.new()\n    local self = setmetatable({}, MyClass)\n    return self\nend\n\nfunction MyClass:Destroy()\n\nend\n\nreturn MyClass\n"))),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"all"},"All"),(0,l.kt)("p",null,"All the above snippets together."),(0,l.kt)("details",{class:"note"},(0,l.kt)("summary",null,"All Snippets"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n\n    "Service": {\n        "prefix": ["service"],\n        "body": ["local ${0:Name}Service = game:GetService(\\"${0:Name}Service\\")"],\n        "description": "Roblox Service"\n    },\n\n    "Class": {\n        "prefix": ["class"],\n        "body": [\n            "local ${0:$TM_FILENAME_BASE} = {}",\n            "${0:$TM_FILENAME_BASE}.__index = ${0:$TM_FILENAME_BASE}",\n            "",\n            "",\n            "function ${0:$TM_FILENAME_BASE}.new()",\n            "\\tlocal self = setmetatable({}, ${0:$TM_FILENAME_BASE})",\n            "\\treturn self",\n            "end",\n            "",\n            "",\n            "function ${0:$TM_FILENAME_BASE}:Destroy()",\n            "\\t",\n            "end",\n            "",\n            "",\n            "return ${0:$TM_FILENAME_BASE}",\n            ""\n        ],\n        "description": "Lua Class"\n    },\n\n    "Crystal": {\n        "prefix": ["Crystal"],\n        "body": ["local Crystal = require(ReplicatedStorage.Packages.Crystal)"],\n        "description": "Require the Crystal module"\n    },\n\n    "Crystal Service": {\n        "prefix": ["Crystalservice"],\n        "body": [\n            "local Crystal = require(ReplicatedStorage.Packages.Crystal)",\n            "",\n            "local ${0:$TM_FILENAME_BASE} = Crystal.CreateService {",\n            "\\tName = \\"${0:$TM_FILENAME_BASE}\\",",\n            "\\tClient = {},",\n            "}",\n            "",\n            "",\n            "function ${0:$TM_FILENAME_BASE}:CrystalStart()",\n            "\\t",\n            "end",\n            "",\n            "",\n            "function ${0:$TM_FILENAME_BASE}:CrystalInit()",\n            "\\t",\n            "end",\n            "",\n            "",\n            "return ${0:$TM_FILENAME_BASE}",\n            ""\n        ],\n        "description": "Crystal Service template"\n    },\n\n    "Crystal Controller": {\n        "prefix": ["Crystalcontroller"],\n        "body": [\n            "local Crystal = require(ReplicatedStorage.Packages.Crystal)",\n            "",\n            "local ${0:$TM_FILENAME_BASE} = Crystal.CreateController { Name = \\"${0:$TM_FILENAME_BASE}\\" }",\n            "",\n            "",\n            "function ${0:$TM_FILENAME_BASE}:CrystalStart()",\n            "\\t",\n            "end",\n            "",\n            "",\n            "function ${0:$TM_FILENAME_BASE}:CrystalInit()",\n            "\\t",\n            "end",\n            "",\n            "",\n            "return ${0:$TM_FILENAME_BASE}",\n            ""\n        ],\n        "description": "Crystal Controller template"\n    },\n\n    "Crystal Require": {\n        "prefix": ["Crystalrequire"],\n        "body": ["local ${1:Name} = require(Crystal.${2:Util}.${1:Name})"],\n        "description": "Crystal Require template"\n    }\n\n}\n'))))}u.isMDXComponent=!0},59810:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/snippets-00a77d4cc99fc8c998326687e563847d.gif"}}]);